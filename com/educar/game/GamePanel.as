package com.educar.game {		import flash.display.Sprite;	import flash.events.MouseEvent;	import com.greensock.TweenLite;	import com.greensock.easing.Back;	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.DisplayObjectContainer;	import com.greensock.TimelineLite;	import flash.display.DisplayObject;		public class GamePanel extends MovieClip {								private var interfaceAnim:TimelineLite;		private var elementsAnim:TimelineLite;						public function GamePanel() {			this.addEventListener( Event.ADDED_TO_STAGE, init, false, 0, true );		}				private function init(e:Event):void {			stop();			if(btnNext) btnNext.addEventListener(MouseEvent.CLICK, nextSlide );						this.interfaceAnim = new TimelineLite();			for( var i:uint=0; i < this.numChildren; i++ ){				var child:DisplayObject = this.getChildAt(i);				if( child is GameButton ){										this.interfaceAnim.from( child, 1, { alpha: 0, x: '+20', ease: Back.easeOut } );				}			}			updateFrame();		}				private function nextSlide(e:MouseEvent):void {			if( this.currentFrame == this.totalFrames ){				closePanel();				return;			}			this.nextFrame();			updateFrame();		}				private function updateFrame(){			this.elementsAnim = new TimelineLite({ onReverseComplete: closePanelEnd });			for( var i:uint=0; i < this.numChildren; i++ ){				var child:DisplayObject = this.getChildAt(i);				if( child.name.indexOf('mcElement') >= 0 ){					var nX = (Math.random()*30 - 15).toString();					var nY = 0;					if( child.y < this.height/2 ) nY -= (Math.random()*15);					else nY += (Math.random()*15);					nY = nY.toString();					this.elementsAnim.from( child, 0.8, { alpha: 0, x: nX, y: nY, ease: Back.easeOut }, '-=0.5' );				}			}		}				private function closePanel(){			if( btnNext ) btnNext.mouseEnabled = false;			this.interfaceAnim.reverse();			this.elementsAnim.reverse();		}				private function closePanelEnd(){			this.dispatchEvent( new GameEvent( GameEvent.GAME_START ) );			this.parent.removeChild( this );		}	}		}