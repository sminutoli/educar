package com.educar.identikit {	import flash.display.Sprite;	import flash.utils.getQualifiedClassName;	import flash.events.Event;	import flash.geom.Point;	import com.greensock.TweenLite;	import com.greensock.easing.Back;	import com.util.HTMLColors;	import com.educar.game.GameButton;	import com.educar.game.GameEvent;		public class FaceZone extends Sprite {				public static const ITEM_SELECTED:String = 'facezone_item_selected';		public static const FACE_COMPLETE:String = 'facezone_complete';						private static var instance:FaceZone;				public static function getInstance():FaceZone {			return instance;		}				private var itemsPos:Object;		private var items:Object;				public var mcRules:GameButton;				public function FaceZone() {			if( instance ) throw new Error( "FaceZone is a singleton!" );			instance = this;						this.addEventListener(Event.ADDED_TO_STAGE, init );		}				private function init(e:Event):void {			items = new Object();			itemsPos = {				'Hair3': new Point(2.25,-39.75),				'Eyebrows3': new Point(0,-20.55),				'Nose3': new Point(5,2),				'Eyes2': new Point(2,-11),				'Mouth1': new Point(6,25),				'Ears3':  new Point(1.65,-4.65)				}						this.hitArea = new Sprite();			this.hitArea.graphics.beginFill( HTMLColors.magenta, 0 );			this.hitArea.graphics.drawRect( -50, -50, 100, 100 );			this.hitArea.rotation = -12;			this.hitArea.x = 0;			this.hitArea.y = -5;			this.addChild( this.hitArea );						this.mcRules.setClickEvent( new GameEvent( GameEvent.GAME_SHOW_RULES ) );			this.stage.addEventListener( GameEvent.GAME_WIN, hideRulesButton, false, 0, true ); 		}				private function hideRulesButton(e:GameEvent):void {			TweenLite.to( mcRules, 0.5, { alpha: 0 } );		}				public function addItem( item:IdentikitItem ):void {						item.stopDrag();			item.mouseEnabled = item.mouseChildren = false;			item.filters = [];			var pos:Point = item.localToGlobal( new Point( 0, 0 ) );			pos = this.globalToLocal( pos );			item.x = pos.x;			item.y = pos.y;			this.addChild( item );			//helps to find the correct pos			//trace( "pos = new Point("+pos.x+","+pos.y+")" );									var className:String = getQualifiedClassName(item);			items[className] = item;									this.dispatchEvent( new Event( ITEM_SELECTED, true ) );						pos = itemsPos[ className ];			TweenLite.to( item, 0.5, { x: pos.x, y: pos.y, ease: Back.easeOut } );		}				public function get itemsSelected():int {			var i:int = 0;			for( var prop:String in items ){				i++;			}			return i;		}	}	}