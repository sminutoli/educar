package com.educar.identikit  {	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.ui.Mouse;	import flash.utils.getQualifiedClassName;	import flash.utils.getDefinitionByName;	import com.greensock.TweenLite;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.GlowFilterPlugin;	import flash.filters.GlowFilter;	import flash.display.Shape;	import com.util.HTMLColors;	import flash.geom.Rectangle;	import flash.events.Event;	import flash.display.MovieClip;		public class IdentikitItem extends MovieClip {				private var ghost:IdentikitItem;				public function IdentikitItem() {			// constructor code			//trace( "IdentikitItem ", this.name );						this.addEventListener(Event.ADDED_TO_STAGE, init );					}				private function init(e:Event):void {			this.removeEventListener(Event.ADDED_TO_STAGE, init );						this.addEventListener(MouseEvent.MOUSE_DOWN, make_ghost );			this.useHandCursor = this.buttonMode = true;						TweenPlugin.activate( [ GlowFilterPlugin ] );						this.hitArea = new Sprite();			this.hitArea.graphics.beginFill( HTMLColors.magenta, 0 );			var bounds:Rectangle = this.getBounds( this );			this.hitArea.graphics.drawRect(bounds.left, 										   bounds.top, 										   bounds.width, 										   bounds.height );			this.addChildAt( this.hitArea, 0 );		}				private function make_ghost(e:MouseEvent):void {						var className = getQualifiedClassName(this);			var classDef = getDefinitionByName( className );						var main:Sprite = Main.getInstance();						this.ghost = new classDef();			this.ghost.x = this.getBounds( main ).x + this.width/2;			this.ghost.y = this.getBounds( main ).y + this.height/2;			this.ghost.filters = [ new GlowFilter( 0xFFFFFF, 0.7, 6, 6, 2, 3 ) ];			this.ghost.startDrag();						main.addChild( this.ghost );						TweenLite.to( this, 1, { alpha: 0.3 } );						this.stage.addEventListener( MouseEvent.MOUSE_UP, check_ghost );		}				private function check_ghost(e:MouseEvent):void {			this.stage.removeEventListener( MouseEvent.MOUSE_UP, check_ghost );						if( this.ghost.correct && this.ghost.hitTestObject( FaceZone.getInstance().hitArea ) ){			    FaceZone.getInstance().addItem( this.ghost );							} else {				kill_ghost( e );			}					}				private function kill_ghost(e:MouseEvent):void {			TweenLite.to( this, 1, { alpha: 1 } );			//this.parent.removeChild( this.ghost );			var main:Sprite = Main.getInstance();			var posX:Number = this.getBounds( main ).x + this.width/2;			var posY:Number = this.getBounds( main ).y + this.height/2;			TweenLite.to( this.ghost, 0.5, { x: posX, y: posY, onComplete: this.ghost.parent.removeChild, onCompleteParams: [ this.ghost ] } ); 		}				public function get correct():Boolean {			return Solution.checkItem(this);		}	}	}