package com.educar.identikit {		import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.Shape;	import com.util.HTMLColors;	import flash.events.Event;	import com.greensock.TweenLite;	import com.greensock.easing.Strong;	import com.educar.game.GameButton;	import com.educar.game.GameEvent;			public class FaceItems extends Sprite {				private static var instance:FaceItems;				public static function getInstance():FaceItems {			return FaceItems.instance;		}				private var positions:Array;		private var nPos:uint;		private var theMask:Shape;		private var theContainer:Sprite;				public var mcReplay:GameButton;				public function FaceItems() {			if( FaceItems.instance ) throw new Error( "FaceItem is a singleton!" );			FaceItems.instance = this;						this.addEventListener(Event.ADDED_TO_STAGE, init );		}				private function init( e:Event ):void {			this.removeEventListener(Event.ADDED_TO_STAGE, init );						this.theContainer = new Sprite();			var aux:Array = [];			for( var i:uint = 0; i < this.numChildren; i++ ){				aux[i] = this.getChildAt( i );			}			for each( var child:DisplayObject in aux ){				this.theContainer.addChild( child );			}			this.addChild( this.theContainer );						this.theMask = new Shape();			this.theMask.graphics.beginFill( HTMLColors.magenta );			this.theMask.graphics.drawRect(0,0, 380, 280 );			this.theMask.graphics.endFill();			this.addChild( this.theMask );						this.theContainer.mask = this.theMask;						this.nPos = 0;			this.positions = new Array();						this.stage.addEventListener( FaceZone.ITEM_SELECTED, refresh_items, false, 0, true );			//this.stage.addEventListener( FaceZone.HAIR_SELECTED, refresh_items, false, 0, true );						mcReplay.setClickEvent( new GameEvent( GameEvent.GAME_REPLAY ) );		}				private function refresh_items( e:Event ):void {			var nY:int;			var nModule:uint = 330;			switch( e.target.itemsSelected ){				case 1:				nY = -nModule;				break;								case 3:				nY = -nModule*2;				break;								case 5:				nY = -nModule*3;				break;								case 6:				nY = -nModule*4;				this.dispatchEvent( new GameEvent( GameEvent.GAME_WIN ) );				break;			}			if( nY ) TweenLite.to( this.theContainer, 1, { y: nY, ease: Strong.easeInOut  } );					}			}	}