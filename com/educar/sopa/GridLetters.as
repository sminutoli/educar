package com.educar.sopa {	import flash.display.Sprite;	import flash.geom.Point;	import com.greensock.TweenLite;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.Shape;		public class GridLetters extends Sprite {				private var nWidth:uint;		private var values:Array; //chars		private var solutionsBck:Array;		private var solutions:Array; //GridSolution		private var hand:Sprite;				private var selectionStart:Letter;		private var selectionEnd:Letter;		private var selectionShape:Shape;				private var lettersContainer:Sprite;		private var solutionsContainer:Sprite;		private var lettersShowed:uint;				//TODO hacer que esta sopa en puntual herede de una más genérica		public function GridLetters() {						this.lettersContainer = new Sprite();			this.addChild( this.lettersContainer );						this.solutionsContainer = new Sprite();			this.solutionsContainer.mouseEnabled = this.solutionsContainer.mouseChildren = false;			this.addChild( this.solutionsContainer );						this.hand = new HintHand();						// constructor code			this.nWidth = this.getWidth();						// TODO: hacerlo genérico			this.values = this.getLetters();						this.solutions = this.getSolutions();						var pos:Point = new Point(0,0);			var nLength:uint = this.values.length;			for( var i:uint=0; i < nLength; i++){				var l:Letter = new Letter( this.values[i], new Point( pos.x, pos.y ) );				l.name = 'mcLetter-'+pos.x+'-'+pos.y;				l.x = pos.x * l.width;				l.y = pos.y * l.height;												pos.x++;				if( i > 0 && (i+1) % nWidth == 0 ){					pos.y ++;					pos.x = 0;				}				this.lettersContainer.addChild( l );			}			this.showGrid();						this.addEventListener( MouseEvent.MOUSE_DOWN, begin_selection );			this.addEventListener( MouseEvent.MOUSE_UP, end_selection );						this.addEventListener(Event.ADDED_TO_STAGE, init );		}				protected function getSolutions():Array {			return GridSolutionFactory.getSolutions().slice(0);		}				protected function getWidth():uint {			return 14;		}		protected function getLetters():Array {			var sLetras:String = "iatahbonqjioazohzaahwjciwvimrpobbipasayaaaulqricñtñidoacluuaaihoaevvdibxsrpejddlfleilñsberrihñannarfianooskrñaqeuyehsnvakiaboxuñzgaerixxzateulkpdolbtoyrxzxrecotuamwzilamoriralhuromidyeaowuentraron";			return sLetras.split('');		}				private function init(e:Event):void {			this.removeEventListener(Event.ADDED_TO_STAGE, init );			this.stage.addEventListener( Main.GAME_HINTS, show_hints );		}				private function show_hints(e:Event):void {						this.dispatchEvent( new GridEvent( GridEvent.SHOW_SOLUTION ) );			this.addChild( this.hand );			this.hand.x = 0;			this.hand.y = 0;			this.hand.alpha = 0;			TweenLite.to( this.hand, 0.5, { alpha: 1 } );						var solution:GridSolution;			var letter:Letter;			var nDelay:Number = 0;			for( var i:uint = 0; solution = this.solutions[i]; i++ ){								letter = this.lettersContainer.getChildByName( 'mcLetter-'+solution.start.x+'-'+solution.start.y ) as Letter;								TweenLite.to( this.hand, 0.5, { x: letter.getBounds(this).x, y: letter.getBounds(this).y, delay: nDelay  } );				nDelay += 0.5;								TweenLite.delayedCall( nDelay, show_hint, [ letter, MouseEvent.ROLL_OVER ] );				nDelay += 0.3;				TweenLite.delayedCall( nDelay, show_hint, [ letter, MouseEvent.MOUSE_DOWN ] );				nDelay += 0.3;				TweenLite.delayedCall( nDelay, show_hint, [ letter, MouseEvent.ROLL_OUT ] );				nDelay += 0.5;								letter = this.lettersContainer.getChildByName( 'mcLetter-'+solution.end.x+'-'+solution.end.y ) as Letter;								TweenLite.to( this.hand, 0.5, { x: letter.getBounds(this).x, y: letter.getBounds(this).y, delay: nDelay  } );				nDelay += 0.5;								TweenLite.delayedCall( nDelay, show_hint, [ letter, MouseEvent.ROLL_OVER ] );				nDelay += 0.3;				TweenLite.delayedCall( nDelay, show_hint, [ letter, MouseEvent.MOUSE_UP ] );				nDelay += 0.3;				TweenLite.delayedCall( nDelay, show_hint, [ letter, MouseEvent.ROLL_OUT ] );				nDelay += 0.5;			}						TweenLite.to( this.hand, 0.5, { alpha: 0, delay: nDelay, onComplete: this.removeChild, onCompleteParams: [ this.hand ]  } );			TweenLite.delayedCall( nDelay, this.dispatchEvent, [ new GridEvent( GridEvent.SHOW_SOLUTION_END ) ] );		}				private function show_hint( letter:Letter, type:String ){			letter.dispatchEvent( new MouseEvent( type ) );		}				public function begin_selection( e:Event ):void {			trace( e.target.getPos() );			this.selectionStart = e.target as Letter;			this.addEventListener( Letter.LETTER_OVER, update_selection );		}		public function end_selection( e:Event ):void {			//trace( e.target.getPos() );			var gridEvent:GridEvent;			var selectionResult:GridSolution = this.checkSelection();			if( !selectionResult ){				if( this.selectionShape ) this.solutionsContainer.removeChild( this.selectionShape );				gridEvent = new GridEvent( GridEvent.SOLUTION_WRONG, null );			} else {				gridEvent = new GridEvent( GridEvent.SOLUTION_OK, selectionResult );				if( this.solutions.length == 0 ) this.dispatchEvent( new GridEvent( GridEvent.GRID_COMPLETE, null ) );			}			this.dispatchEvent( gridEvent );						this.selectionShape = null;			this.removeEventListener( Letter.LETTER_OVER, update_selection );		}		public function update_selection( e:Event ):void {			//trace( e.target.getPos() );			this.selectionEnd = e.target as Letter;						if( this.selectionShape ){				this.solutionsContainer.removeChild( this.selectionShape );				this.selectionShape = null;			}			this.selectionShape = GridSelection.drawSelection( this.selectionStart, this.selectionEnd, this );			this.solutionsContainer.addChild( this.selectionShape );					}				public function showGrid():void{			this.lettersShowed = 0;			for( var i:uint = 0; i < this.lettersContainer.numChildren; i++ ){				var l:Letter = this.lettersContainer.getChildAt( i ) as Letter;				l.addEventListener( Event.COMPLETE, letter_showed );				l.show();			}		}				private function letter_showed( e:Event ):void {			this.lettersShowed++;			if( this.lettersShowed == this.lettersContainer.numChildren ){				this.dispatchEvent( new Event( Event.COMPLETE ) );			}		}				public function checkSelection():GridSolution {			var solution:GridSolution;			for( var i:uint = 0; solution = this.solutions[i]; i++ ){				if( solution.check( this.selectionStart.getPos() , this.selectionEnd.getPos() ) ){					this.solutions.splice( i, 1 );					return solution;				}			}			return null;		}	}	}