package com.educar.sopa {	import flash.text.TextField;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Point;	import com.greensock.TweenLite;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.TintPlugin;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.Event;	import com.util.HTMLColors;		public class Letter extends Sprite {				public static const LETTER_OVER:String = "letter_over";		public static const LETTER_OUT:String = "letter_out";				private var value:String;		private var pos:Point;		private var txt:TextField;		private var border:Shape;		private var back:Shape;		private var _active:Boolean;		private var size:Point;		private var colorNormal:uint = AppColors.GRID_BACK;		private var colorOver:uint = AppColors.GRID_SELECTED;		private var loop:Timer;						public function Letter( val:String, pos:Point, size:Point=undefined ) {			// constructor code			this.pos = pos;			this.value = val.toUpperCase();			if( !size ){				size = new Point( 23, 23 );			}			this.size = size;						TweenPlugin.activate( [ TintPlugin ] );								//config back				this.back = new Shape();			this.back.graphics.beginFill( this.colorNormal, 1 );			this.back.graphics.drawRect( 0,0, this.size.x, this.size.y );			this.addChild( back );									//config txt			this.txt = AppText.getLetterLabel();			this.txt.text = String.fromCharCode( 65 + Math.floor( Math.random()*25 ) );			this.txt.x = this.back.x + ( this.back.width - this.txt.width ) / 2;			this.txt.y = this.back.y + ( this.back.height - this.txt.height ) / 2;			this.addChild( txt );						//config border			this.border = new Shape();			this.border.graphics.lineStyle( 1, HTMLColors.grey );			this.border.graphics.drawRect( 0,0, this.size.x, this.size.y );			this.addChild( border );						//mouse			this.useHandCursor = true;			this.buttonMode = true;			this.mouseChildren = false;			this.addEventListener( MouseEvent.ROLL_OVER, handle_over, false, 0, true );			this.addEventListener( MouseEvent.ROLL_OUT, handle_out, false, 0, true );			this.mouseEnabled = false;		}				public function show():void {			var nOffset:Number = Math.random()*1500;			this.txt.alpha = 0;			TweenLite.to( this.txt, 1, { alpha: 1, delay: nOffset/1000 } );			this.loop = new Timer( nOffset, 1 );			this.loop.addEventListener(TimerEvent.TIMER_COMPLETE, showAnimation );			this.loop.start();		}				private function showAnimation( e:TimerEvent ):void {			this.loop = new Timer( 1000/10, 20+ Math.floor( Math.random()*10 ) );			this.loop.addEventListener(TimerEvent.TIMER, changeValue );			this.loop.addEventListener(TimerEvent.TIMER_COMPLETE, finalValue );			this.loop.start();		}				private function changeValue( e:TimerEvent ):void {			this.txt.text = String.fromCharCode( 65 + Math.floor( Math.random()*25 ) );			this.txt.x = this.back.x + ( this.back.width - this.txt.width ) / 2;			this.txt.y = this.back.y + ( this.back.height - this.txt.height ) / 2;		}		private function finalValue( e:TimerEvent ):void {			this.txt.text = this.value;			this.txt.x = this.back.x + ( this.back.width - this.txt.width ) / 2;			this.txt.y = this.back.y + ( this.back.height - this.txt.height ) / 2;			this.mouseEnabled = true;			this.dispatchEvent( new Event( Event.COMPLETE ) );		}				public function handle_over( e:MouseEvent ):void {			TweenLite.to( back, 0.5, { tint: this.colorOver } );			this.dispatchEvent( new Event( LETTER_OVER, true, false ) );		}		public function handle_out( e:MouseEvent ):void {			TweenLite.to( back, 0.5, { tint: null } );			this.dispatchEvent( new Event( LETTER_OUT, true, false ) );		}				public function getPos():Point {			return this.pos;		}				public function get active():Boolean {			return this._active;		}		public function set active( val:Boolean ):void {			this._active = val;		}			}	}