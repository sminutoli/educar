package com.educar.sopa {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.text.StyleSheet;	import com.util.HTMLColors;	import flash.text.TextField;	import com.util.TextFieldAnimated;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextFormat;	import com.greensock.TweenLite;	import flash.geom.Rectangle;	import com.greensock.easing.Elastic;	import com.greensock.easing.Strong;	import com.greensock.easing.Back;		public class Panel extends Sprite {				//vienen del FLA		public var btnNext:Sprite;		private var btnNextBounds:Rectangle;				public var btnPrev:Sprite;		private var btnPrevBounds:Rectangle;				public var btnClose:Sprite;		private var btnCloseBounds:Rectangle;				public var txtTitle:TextField;		public var txtDescription:TextField;				public var mcIndex:Sprite;		private var mcIndexBounds:Rectangle;				private var titleAnim:TextFieldAnimated;		private var descAnim:TextFieldAnimated;				private var nSlide:uint;		private var slides:Array; // de slides { title: , desc: }						public function Panel( nSlide:uint = 1 ) {			// constructor code						this.mcIndexBounds = mcIndex.getBounds( this );			this.btnPrevBounds = btnPrev.getBounds( this );			this.btnNextBounds = btnNext.getBounds( this );			this.btnCloseBounds = btnClose.getBounds( this );						var style:StyleSheet = new StyleSheet();			style.setStyle( '.resalte', { color: '#DC143C' } );						var format:TextFormat = new TextFormat();			format.kerning = 'on';			format.letterSpacing = -10;						txtTitle.setTextFormat( format );			txtTitle.styleSheet = style;						this.initSlides();						this.gotoSlide( nSlide );						btnNext.useHandCursor =			btnNext.buttonMode =			btnPrev.useHandCursor =			btnPrev.buttonMode =			btnClose.useHandCursor =			btnClose.buttonMode = true;									btnNext.addEventListener(MouseEvent.CLICK, nextSlide, false, 0, true );			btnPrev.addEventListener(MouseEvent.CLICK, prevSlide, false, 0, true );			btnClose.addEventListener(MouseEvent.CLICK, closePanel, false, 0, true );		}				private function initSlides(){			this.slides = new Array();			this.slides.push({ 							 title: '<span class="resalte">“Piensa</span> el ladrón que todos son de su condición”',							 desc: '"Pensar" en pretérito pluscuamperfecto del indicativo (acción pasada más antigua que otra acción pasada)'							 });			this.slides.push({ 							 title: '“La tercera <span class="resalte">es</span> la vencida”',							 desc: '“Ser” en pretérito pluscuamperfecto del indicativo\n(acción pasada más antigua que otra acción pasada)'							 });			this.slides.push({ 							 title: '“En boca cerrada no <span class="resalte">entran</span> moscas”',							 desc: '“Entrar” en pretérito perfecto simple del indicativo\n(hecho puntual)'							 });			this.slides.push({ 							 title: '“Del árbol caído todos <span class="resalte">hacen</span> leña”',							 desc: '“Hacer” en pretérito perfecto simple del indicativo\n(hecho puntual)'							 });			this.slides.push({ 							 title: '“A caballo regalado no se le <span class="resalte">miran</span> los dientes”',							 desc: '“Mirar” en pretérito imperfecto del indicativo (acción duradera)'							 });			this.slides.push({ 							 title: '“El pez por la boca <span class="resalte">muere</span>”',							 desc: '“Morir” en futuro simple o imperfecto del indicativo'							 });			this.slides.push({ 							 title: '“No <span class="resalte">hay</span> peor sordo que el que no quiere oír”',							 desc: '“Haber” en futuro simple o imperfecto del indicativo'							 });			this.slides.push({ 							 title: '“No <span class="resalte">hay</span> rosas sin espinas”',							 desc: '“Haber” en pretérito imperfecto del indicativo\n(acción duradera o repetida en el pasado)'							 });			this.slides.push({ 							 title: '“Todo <span class="resalte">pasará</span>”',							 desc: '“Pasar” en presente del indicativo'							 });			this.slides.push({ 							 title: '“El que se <span class="resalte">fue</span> a Sevilla perdió su silla”',							 desc: '“Ir” en presente del indicativo'							 });		}				public function nextSlide(e:MouseEvent):void {			this.nSlide++;			if( this.nSlide > this.slides.length ) this.nSlide = 1;			this.updateSlide();		}		public function prevSlide(e:MouseEvent):void {			this.nSlide--;			if( this.nSlide < 1 ) this.nSlide = this.slides.length;			this.updateSlide();		}		public function gotoSlide( n:uint ):void {			this.nSlide = n;			this.updateSlide();		}				private function closePanel( e:MouseEvent ):void {			TweenLite.to( mcIndex, 0.8, { alpha: 0, ease: Back.easeIn, y: mcIndexBounds.top - 50  } );			TweenLite.to( btnPrev, 0.8, { alpha: 0, ease: Back.easeIn, x: btnPrevBounds.left -50  } );			TweenLite.to( btnNext, 0.8, { alpha: 0, ease: Back.easeIn, x: btnNextBounds.right +50  } );			TweenLite.to( btnClose, 0.8, { alpha: 0, ease: Back.easeIn, y: btnCloseBounds.top + 20 } );			TweenLite.to( txtTitle, 0.8, { alpha: 0 } );			TweenLite.to( txtDescription, 0.8, { alpha: 0, onComplete: closePanelEnd } );		}				private function closePanelEnd():void {			this.dispatchEvent( new Event( GridEvent.HIDE_HINT, true ) );			this.parent.removeChild( this );		}					private function updateSlide():void {						mcIndex['txtLabel'].text = this.nSlide;			mcIndex.alpha = 0;			mcIndex.y = mcIndexBounds.top - 50;			TweenLite.to( mcIndex, 0.8, { alpha: 1, ease: Back.easeOut, y: mcIndexBounds.top, delay: 0.5  } );						btnPrev.alpha = 0;			btnPrev.x = btnPrevBounds.left - 50;			TweenLite.to( btnPrev, 0.8, { alpha: 1, ease: Back.easeOut, x: btnPrevBounds.left + btnPrev.width/2, delay: 0.5  } );						btnNext.alpha = 0;			btnNext.x = btnNextBounds.right + 50;			TweenLite.to( btnNext, 0.8, { alpha: 1, ease: Back.easeOut, x: btnNextBounds.right - btnPrev.width/2, delay: 0.5  } );						btnClose.alpha = 0;			btnClose.y = btnCloseBounds.top + 20;			TweenLite.to( btnClose, 0.8, { alpha: 1, ease: Back.easeOut, y: btnCloseBounds.top, delay: 0.5 } );						txtTitle.htmlText = this.slides[ nSlide -1 ].title;			txtDescription.text = this.slides[ nSlide -1 ].desc;			this.titleAnim = new TextFieldAnimated( txtTitle );			this.titleAnim.start();			this.descAnim = new TextFieldAnimated( txtDescription, 0.5 );			this.descAnim.start();			//this.titleAnim.addEventListener( Event.COMPLETE, descAnim.start, false, 0, true );		}			}	}