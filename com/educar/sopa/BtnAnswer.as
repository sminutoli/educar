package com.educar.sopa {	import flash.text.TextFormat;	import flash.text.TextField;	import flash.display.Shape;	import com.util.HTMLColors;	import flash.text.TextFieldAutoSize;	import flash.events.Event;	import flash.display.Sprite;	import com.greensock.TweenLite;	import com.greensock.easing.Elastic;	import flash.events.MouseEvent;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.GlowFilterPlugin;	import com.greensock.easing.Back;		public class BtnAnswer extends Sprite {				private var _id:uint;		private var value:String;		private var label:TextField;		private var back:Shape;				private var animation:TweenLite;				public function BtnAnswer( id:uint, value:String ) {			// constructor code			this._id = id;			this.value = value;						this.mouseChildren = false;			this.buttonMode = this.useHandCursor = true;						this.back = new Shape();			this.back.graphics.beginFill( AppColors.ANSWER_BACK );			this.back.graphics.drawRoundRect( 0, 0, 145, 20, 10, 10 );			this.addChild( this.back );						this.label = AppText.getAnswerLabel();			this.addChild( this.label );			this.label.autoSize = TextFieldAutoSize.CENTER;			this.label.width = this.back.width;			this.label.y = 3;			this.label.text = '?';						this.visible = false;						this.addEventListener( Event.ADDED_TO_STAGE, bind_listeners );		}				public function get id():uint {			return this._id;		}				private function bind_listeners( e:Event ):void {			this.removeEventListener( Event.ADDED_TO_STAGE, bind_listeners );			this.stage.addEventListener( GridEvent.SOLUTION_OK, check_answer );		}				private function check_answer( e:GridEvent ):void {			if( e.solution.id == this.id ){				this.label.width = 0;				this.label.x = 5;				this.label.autoSize = TextFieldAutoSize.LEFT;				this.label.text = this.value.toUpperCase();				show_end();				//TweenPlugin.activate( [ GlowFilterPlugin ] );				//TweenLite.from(this, 2, {glowFilter:{color: AppColors.ANSWER_FONT, blurX:5, blurY:5, strength:1, alpha:1}});				TweenLite.from(this, 1, { y: '-5', ease: Back.easeOut });			}		}				public function show( delay:uint = 0 ):void {			this.visible = true;			this.label.visible = false;			this.back.scaleX = 0;			TweenLite.to( this.back, 1.2, { scaleX: 1, delay: delay/1000, ease: Elastic.easeOut, onComplete: show_end } );		}				private function show_end():void {			this.label.visible = true;			this.label.alpha = 0;			TweenLite.to( this.label, 0.5, { alpha: 1 } );			this.make_animation();		}				private function make_animation():void {			this.animation = TweenLite.to( this.back, 0.5, { scaleX: 0.9, alpha: 0.9 } );			this.animation.pause();			this.addEventListener(MouseEvent.ROLL_OVER, btn_over );			this.addEventListener(MouseEvent.ROLL_OUT, btn_out );			this.addEventListener(MouseEvent.CLICK, btn_click );		}				private function btn_over( e:MouseEvent ):void {			this.animation.play();		}		private function btn_out( e:MouseEvent ):void {			this.animation.reverse();		}		private function btn_click( e:MouseEvent ):void {			this.dispatchEvent( new Event( GridEvent.SHOW_HINT, true ) );		}	}	}