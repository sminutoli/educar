package com.educar.sopa {	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Sprite;	import com.util.HTMLColors;	import com.greensock.TweenLite;	import flash.ui.Mouse;	import com.educar.game.GameEvent;		public class Main extends MovieClip {				public static const GAME_REPLAY:String = 'sopa_game_replay';		public static const GAME_HINTS:String = 'sopa_game_hints';				private var navRefran:NavRefran;		private var navAnswer:NavAnswer;		private var gridLetters:GridLetters;		private var gameBlock:Sprite;		private var btnHints:SopaBtn;		private var btnReplay:SopaBtn;				public function Main() {			// constructor code			//trace( 'EducarSopa Main.as', this);			this.addEventListener( Event.ADDED_TO_STAGE, init );		}				private function init( e:Event ):void {						//trace( 'EducarSopa Main.as init');			//this.createButtons();			this.createBlocking();			this.bindEvents();			this.createRules();		}				private function createRules(){			this.gameBlock.mouseEnabled = true;			this.gameBlock.height = 50;			this.gameBlock.alpha = 0;			TweenLite.to( this.gameBlock, 0.5, { alpha: 1, height: this.stage.stageHeight } );						var panel:Sprite = new RulesPanel();			this.addChildAt( panel, 2 );		}				private function createButtons(e:GameEvent=null):void {			this.navRefran = new NavRefran();			this.navRefran.x = 15;			this.navRefran.y = 135;									this.addChildAt( this.navRefran, 0 );						this.gridLetters = new GridLetters();			this.gridLetters.x = 165;			this.gridLetters.y = 28;			this.addChildAt( this.gridLetters, 1 );						this.navAnswer = new NavAnswer();			this.navAnswer.x = 520;			this.navAnswer.y = 28;									this.addChildAt( this.navAnswer, 2 );						this.btnHints = new BtnHints();			this.btnHints.x = this.stage.stageWidth - (this.btnHints.width/2) - 50;			this.btnHints.y = 300;			this.addChildAt( this.btnHints, 3 );			TweenLite.delayedCall( 4, this.btnHints.setEnabled, [ true ] );						this.btnReplay = new BtnReplay();			this.btnReplay.x = this.btnHints.x;			this.btnReplay.y = this.btnHints.y + this.btnHints.height/2 + 20;			this.addChildAt( this.btnReplay, 4 );		}				private function createBlocking():void {			this.gameBlock = new Sprite();			this.gameBlock.graphics.beginFill( HTMLColors.white );			this.gameBlock.graphics.drawRect( 0, 0, this.stage.stageWidth, this.stage.stageHeight );			this.gameBlock.alpha = 0;			this.gameBlock.mouseEnabled = false;			this.addChildAt( this.gameBlock, 0 );		}				private function bindEvents():void {			this.stage.addEventListener( GridEvent.SHOW_HINT, showHint, false, 0, true );			this.stage.addEventListener( GridEvent.HIDE_HINT, hideHint, false, 0, true );			this.stage.addEventListener( GridEvent.SHOW_SOLUTION, blockScreen, false, 0, true );			this.stage.addEventListener( GridEvent.SHOW_SOLUTION_END, releaseScreen, false, 0, true );			this.stage.addEventListener( GameEvent.GAME_START, hideHint, false, 0, true );			this.stage.addEventListener( GameEvent.GAME_START, this.createButtons, false, 0, true );		}				private function blockScreen(e:Event):void {			Mouse.hide();			this.mouseEnabled = false;			this.mouseChildren = false;		}		private function releaseScreen(e:Event):void {			Mouse.show();			this.mouseEnabled = true;			this.mouseChildren = true;		}				private function showHint(e:Event):void {						this.gameBlock.mouseEnabled = true;			this.gameBlock.height = 50;			this.gameBlock.alpha = 0;			TweenLite.to( this.gameBlock, 0.5, { alpha: 1, height: this.stage.stageHeight } );						var panel:Panel = new Panel( e.target.id );			this.addChild( panel );		}		private function hideHint(e:Event):void {						this.gameBlock.mouseEnabled = false;			TweenLite.to( this.gameBlock, 0.5, { alpha: 0, height: 50 } );					}			}	}